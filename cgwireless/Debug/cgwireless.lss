
cgwireless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001d0  008001d0  00000a64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004004  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001036  00000000  00000000  00004f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001df5  00000000  00000000  00005f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a98  00000000  00000000  00007d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1d  00000000  00000000  00008824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002829  00000000  00000000  00009741  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  0000bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3d       	cpi	r26, 0xD0	; 208
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ed       	ldi	r26, 0xD0	; 208
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1e 03 	call	0x63c	; 0x63c <main>
  9e:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <oled_config>:
}

// switch to graphics mode.
void oled_graphics_mode()
{
	oled_write_cmd(CMD_MODE | CMD_MODE_GFX | CMD_MODE_POWER | CMD_MODE_GFX_FLAG);
  a6:	50 9a       	sbi	0x0a, 0	; 10
  a8:	51 9a       	sbi	0x0a, 1	; 10
  aa:	52 9a       	sbi	0x0a, 2	; 10
  ac:	53 9a       	sbi	0x0a, 3	; 10
  ae:	54 9a       	sbi	0x0a, 4	; 10
  b0:	55 9a       	sbi	0x0a, 5	; 10
  b2:	56 9a       	sbi	0x0a, 6	; 10
  b4:	57 9a       	sbi	0x0a, 7	; 10
  b6:	22 9a       	sbi	0x04, 2	; 4
  b8:	21 9a       	sbi	0x04, 1	; 4
  ba:	20 9a       	sbi	0x04, 0	; 4
  bc:	08 95       	ret

000000be <busy_wait>:
  be:	57 98       	cbi	0x0a, 7	; 10
  c0:	2a 98       	cbi	0x05, 2	; 5
  c2:	29 9a       	sbi	0x05, 1	; 5
  c4:	28 9a       	sbi	0x05, 0	; 5
  c6:	28 98       	cbi	0x05, 0	; 5
  c8:	4f 99       	sbic	0x09, 7	; 9
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <busy_wait+0x6>
  cc:	57 9a       	sbi	0x0a, 7	; 10
  ce:	29 98       	cbi	0x05, 1	; 5
  d0:	08 95       	ret

000000d2 <set_data_bus>:
  d2:	88 23       	and	r24, r24
  d4:	14 f4       	brge	.+4      	; 0xda <set_data_bus+0x8>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	01 c0       	rjmp	.+2      	; 0xdc <set_data_bus+0xa>
  da:	5f 98       	cbi	0x0b, 7	; 11
  dc:	86 ff       	sbrs	r24, 6
  de:	02 c0       	rjmp	.+4      	; 0xe4 <set_data_bus+0x12>
  e0:	5e 9a       	sbi	0x0b, 6	; 11
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <set_data_bus+0x14>
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	85 ff       	sbrs	r24, 5
  e8:	02 c0       	rjmp	.+4      	; 0xee <set_data_bus+0x1c>
  ea:	5d 9a       	sbi	0x0b, 5	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <set_data_bus+0x1e>
  ee:	5d 98       	cbi	0x0b, 5	; 11
  f0:	84 ff       	sbrs	r24, 4
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <set_data_bus+0x26>
  f4:	5c 9a       	sbi	0x0b, 4	; 11
  f6:	01 c0       	rjmp	.+2      	; 0xfa <set_data_bus+0x28>
  f8:	5c 98       	cbi	0x0b, 4	; 11
  fa:	83 ff       	sbrs	r24, 3
  fc:	02 c0       	rjmp	.+4      	; 0x102 <set_data_bus+0x30>
  fe:	5b 9a       	sbi	0x0b, 3	; 11
 100:	01 c0       	rjmp	.+2      	; 0x104 <set_data_bus+0x32>
 102:	5b 98       	cbi	0x0b, 3	; 11
 104:	82 ff       	sbrs	r24, 2
 106:	02 c0       	rjmp	.+4      	; 0x10c <set_data_bus+0x3a>
 108:	5a 9a       	sbi	0x0b, 2	; 11
 10a:	01 c0       	rjmp	.+2      	; 0x10e <set_data_bus+0x3c>
 10c:	5a 98       	cbi	0x0b, 2	; 11
 10e:	81 ff       	sbrs	r24, 1
 110:	02 c0       	rjmp	.+4      	; 0x116 <set_data_bus+0x44>
 112:	59 9a       	sbi	0x0b, 1	; 11
 114:	01 c0       	rjmp	.+2      	; 0x118 <set_data_bus+0x46>
 116:	59 98       	cbi	0x0b, 1	; 11
 118:	80 ff       	sbrs	r24, 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <set_data_bus+0x4e>
 11c:	58 9a       	sbi	0x0b, 0	; 11
 11e:	08 95       	ret
 120:	58 98       	cbi	0x0b, 0	; 11
 122:	08 95       	ret

00000124 <oled_write_cmd_busy>:
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	61 11       	cpse	r22, r1
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <busy_wait>
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 69 00 	call	0xd2	; 0xd2 <set_data_bus>
 134:	2a 98       	cbi	0x05, 2	; 5
 136:	29 98       	cbi	0x05, 1	; 5
 138:	28 9a       	sbi	0x05, 0	; 5
 13a:	28 98       	cbi	0x05, 0	; 5
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <oled_write_cmd>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 92 00 	call	0x124	; 0x124 <oled_write_cmd_busy>
 146:	08 95       	ret

00000148 <oled_clear>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 14e:	08 95       	ret

00000150 <oled_cursor_home>:
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 156:	08 95       	ret

00000158 <oled_incremental_cursor>:
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 15e:	08 95       	ret

00000160 <oled_power_on>:


// switch the OLED on.
void oled_power_on()
{
	oled_write_cmd(CMD_DISPLAY_CONTROL | CMD_DISPLAY_POWER);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 166:	08 95       	ret

00000168 <oled_power_off>:
}

// switch the OLED on.
void oled_power_off()
{
	oled_write_cmd(CMD_DISPLAY_CONTROL);
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 16e:	08 95       	ret

00000170 <oled_write_data>:
}


// Writes the given data to DDRAM or CGRAM.
void oled_write_data(uint8_t data)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	busy_wait();
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <busy_wait>

	 // Set the data bus.
	set_data_bus(data);
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <set_data_bus>

	// 1 - data register.
	OLED_PORT_RS |= (1 << OLED_RS);
 17e:	2a 9a       	sbi	0x05, 2	; 5

	// 0 - write.
	OLED_PORT_RW &= ~(1 << OLED_RW);
 180:	29 98       	cbi	0x05, 1	; 5

	 // Pulse the enable. (on, off)
	OLED_PORT_EN |= (1 << OLED_EN);
 182:	28 9a       	sbi	0x05, 0	; 5
	OLED_PORT_EN &= ~(1 << OLED_EN);
 184:	28 98       	cbi	0x05, 0	; 5
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <get_ddram_address_n1>:
// displays using case N1. (see comments at top).
uint8_t get_ddram_address_n1(uint8_t column_n, uint8_t row_n)
{
	uint8_t addr = 0x00;

	if (row_n == 2)
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	11 f4       	brne	.+4      	; 0x192 <get_ddram_address_n1+0x8>
	{
		addr = 0x40;
 18e:	20 e4       	ldi	r18, 0x40	; 64
 190:	01 c0       	rjmp	.+2      	; 0x194 <get_ddram_address_n1+0xa>

// gets the address for the given column and row.
// displays using case N1. (see comments at top).
uint8_t get_ddram_address_n1(uint8_t column_n, uint8_t row_n)
{
	uint8_t addr = 0x00;
 192:	20 e0       	ldi	r18, 0x00	; 0
	if (row_n == 2)
	{
		addr = 0x40;
	}

	if (column_n > 1 && column_n <= 40)
 194:	9e ef       	ldi	r25, 0xFE	; 254
 196:	98 0f       	add	r25, r24
 198:	97 32       	cpi	r25, 0x27	; 39
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <get_ddram_address_n1+0x18>
	{
		addr |= (column_n - 1);
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	98 0f       	add	r25, r24
 1a0:	29 2b       	or	r18, r25
	}

	return addr;
}
 1a2:	82 2f       	mov	r24, r18
 1a4:	08 95       	ret

000001a6 <oled_write_character>:
}

// write character at given position.
// column and row are 1 based.
void oled_write_character(uint8_t character, uint8_t column, uint8_t row)
{
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
 1aa:	86 2f       	mov	r24, r22
	uint8_t addr = get_ddram_address_n1(column, row);
 1ac:	64 2f       	mov	r22, r20
 1ae:	0e 94 c5 00 	call	0x18a	; 0x18a <get_ddram_address_n1>
	oled_write_cmd(CMD_DDRAM | addr);
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>

	oled_write_data(character);
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 b8 00 	call	0x170	; 0x170 <oled_write_data>
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <cgrf_init>:

	// clear the status bits by setting them to 1.
	nrf24_set_status(STATUS_RX_DR | STATUS_TX_DS | STATUS_MAX_RT);

	m_mode = transmitter;
	cgrf_power_up();
 1c2:	0e 94 22 03 	call	0x644	; 0x644 <nrf24_configure_ports>
 1c6:	08 95       	ret

000001c8 <cgrf_data_ready>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	19 82       	std	Y+1, r1	; 0x01
 1d4:	ce 01       	movw	r24, r28
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <nrf24_get_status>
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	86 fb       	bst	r24, 6
 1e0:	88 27       	eor	r24, r24
 1e2:	80 f9       	bld	r24, 0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <cgrf_get_payload>:
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <cgrf_get_payload+0xc>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	7c 01       	movw	r14, r24
 1fe:	16 2f       	mov	r17, r22
 200:	19 82       	std	Y+1, r1	; 0x01
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	0e 94 39 04 	call	0x872	; 0x872 <nrf24_get_payload_size>
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	66 23       	and	r22, r22
 20e:	51 f0       	breq	.+20     	; 0x224 <cgrf_get_payload+0x38>
 210:	16 17       	cp	r17, r22
 212:	20 f0       	brcs	.+8      	; 0x21c <cgrf_get_payload+0x30>
 214:	c7 01       	movw	r24, r14
 216:	0e 94 4c 04 	call	0x898	; 0x898 <nrf24_get_payload>
 21a:	04 c0       	rjmp	.+8      	; 0x224 <cgrf_get_payload+0x38>
 21c:	61 2f       	mov	r22, r17
 21e:	c7 01       	movw	r24, r14
 220:	0e 94 4c 04 	call	0x898	; 0x898 <nrf24_get_payload>
 224:	1a 82       	std	Y+2, r1	; 0x02
 226:	ce 01       	movw	r24, r28
 228:	02 96       	adiw	r24, 0x02	; 2
 22a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <nrf24_get_status>
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	86 ff       	sbrs	r24, 6
 232:	03 c0       	rjmp	.+6      	; 0x23a <cgrf_get_payload+0x4e>
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	0e 94 a5 03 	call	0x74a	; 0x74a <nrf24_set_status>
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	08 95       	ret

0000024c <set_auto_ack>:
 24c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <m_auto_ack>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	11 f4       	brne	.+4      	; 0x258 <set_auto_ack+0xc>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	01 c0       	rjmp	.+2      	; 0x25a <set_auto_ack+0xe>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 87 03 	call	0x70e	; 0x70e <nrf24_set_en_aa>
 25e:	08 95       	ret

00000260 <set_dynamic_payload>:
 260:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <m_payload_length>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	11 f4       	brne	.+4      	; 0x26c <set_dynamic_payload+0xc>
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	01 c0       	rjmp	.+2      	; 0x26e <set_dynamic_payload+0xe>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 c8 03 	call	0x790	; 0x790 <nrf24_set_dynpd>
 272:	08 95       	ret

00000274 <set_features>:
 274:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <m_payload_length>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	89 f0       	breq	.+34     	; 0x29e <set_features+0x2a>
 27c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <m_auto_ack>
 280:	91 30       	cpi	r25, 0x01	; 1
 282:	39 f4       	brne	.+14     	; 0x292 <set_features+0x1e>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	39 f4       	brne	.+14     	; 0x296 <set_features+0x22>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	01 c0       	rjmp	.+2      	; 0x28e <set_features+0x1a>
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	83 60       	ori	r24, 0x03	; 3
 290:	03 c0       	rjmp	.+6      	; 0x298 <set_features+0x24>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	01 c0       	rjmp	.+2      	; 0x298 <set_features+0x24>
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 cd 03 	call	0x79a	; 0x79a <nrf24_set_feature>
 29c:	08 95       	ret
 29e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <m_auto_ack>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	99 f3       	breq	.-26     	; 0x28c <set_features+0x18>
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	f7 cf       	rjmp	.-18     	; 0x298 <set_features+0x24>

000002aa <set_payload1_size>:
 2aa:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
 2ae:	0e 94 af 03 	call	0x75e	; 0x75e <nrf24_set_rx_pw_p1>
 2b2:	08 95       	ret

000002b4 <set_config>:
 2b4:	cf 93       	push	r28
 2b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <m_crc_encoding>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <set_config+0x12>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	21 f4       	brne	.+8      	; 0x2ca <set_config+0x16>
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <set_config+0x18>
 2c6:	88 e0       	ldi	r24, 0x08	; 8
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <set_config+0x18>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <m_power>
 2d0:	91 11       	cpse	r25, r1
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <set_config+0x22>
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <m_mode>
 2da:	91 30       	cpi	r25, 0x01	; 1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <set_config+0x2c>
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	0e 94 82 03 	call	0x704	; 0x704 <nrf24_set_config>
 2e4:	c8 2f       	mov	r28, r24
 2e6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <m_mode>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	49 f4       	brne	.+18     	; 0x300 <set_config+0x4c>
 2ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <m_power>
 2f2:	81 11       	cpse	r24, r1
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <set_config+0x48>
 2f6:	0e 94 2c 03 	call	0x658	; 0x658 <nrf24_set_ce_high>
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <set_config+0x4c>
 2fc:	0e 94 2a 03 	call	0x654	; 0x654 <nrf24_set_ce_low>
 300:	8c 2f       	mov	r24, r28
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <cgrf_power_up>:
 306:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <m_power>
 30a:	88 23       	and	r24, r24
 30c:	29 f0       	breq	.+10     	; 0x318 <cgrf_power_up+0x12>
 30e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <m_power>
 312:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <set_config>
 316:	08 95       	ret
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret

0000031c <cgrf_power_down>:
 31c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <m_power>
 320:	81 11       	cpse	r24, r1
 322:	06 c0       	rjmp	.+12     	; 0x330 <cgrf_power_down+0x14>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <m_power>
 32a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <set_config>
 32e:	08 95       	ret
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret

00000334 <set_channel>:
 334:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <m_channel>
 338:	0e 94 9b 03 	call	0x736	; 0x736 <nrf24_set_rf_ch>
 33c:	08 95       	ret

0000033e <set_rf_setup>:
 33e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <m_data_rate>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	11 f4       	brne	.+4      	; 0x34a <set_rf_setup+0xc>
 346:	88 e0       	ldi	r24, 0x08	; 8
 348:	01 c0       	rjmp	.+2      	; 0x34c <set_rf_setup+0xe>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <m_output_power>
 350:	99 23       	and	r25, r25
 352:	59 f0       	breq	.+22     	; 0x36a <set_rf_setup+0x2c>
 354:	91 30       	cpi	r25, 0x01	; 1
 356:	11 f4       	brne	.+4      	; 0x35c <set_rf_setup+0x1e>
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	07 c0       	rjmp	.+14     	; 0x36a <set_rf_setup+0x2c>
 35c:	92 30       	cpi	r25, 0x02	; 2
 35e:	11 f4       	brne	.+4      	; 0x364 <set_rf_setup+0x26>
 360:	84 60       	ori	r24, 0x04	; 4
 362:	03 c0       	rjmp	.+6      	; 0x36a <set_rf_setup+0x2c>
 364:	93 30       	cpi	r25, 0x03	; 3
 366:	09 f4       	brne	.+2      	; 0x36a <set_rf_setup+0x2c>
 368:	86 60       	ori	r24, 0x06	; 6
 36a:	0e 94 a0 03 	call	0x740	; 0x740 <nrf24_set_rf_setup>
 36e:	08 95       	ret

00000370 <set_pipe1_address>:
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 02 04 	call	0x804	; 0x804 <nrf24_set_rx_address_pipe1>
 378:	08 95       	ret

0000037a <cgrf_start_as_reciever>:
}

// setup as a receiver and power up.
void cgrf_start_as_reciever()
{
 37a:	cf 93       	push	r28
	// reserved automatic acknowledgment pipe only allows 0x00.
	nrf24_set_rx_pw_p0(0x00);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 aa 03 	call	0x754	; 0x754 <nrf24_set_rx_pw_p0>

	// set number of bytes to zero for unused data pipes.
	nrf24_set_rx_pw_p2(0x00);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 b4 03 	call	0x768	; 0x768 <nrf24_set_rx_pw_p2>
	nrf24_set_rx_pw_p3(0x00);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 b9 03 	call	0x772	; 0x772 <nrf24_set_rx_pw_p3>
	nrf24_set_rx_pw_p4(0x00);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24_set_rx_pw_p4>
	nrf24_set_rx_pw_p5(0x00);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 c3 03 	call	0x786	; 0x786 <nrf24_set_rx_pw_p5>
	
	// enable auto acknowledgment (enhanced ShockBurst).
	set_auto_ack();
 39a:	0e 94 26 01 	call	0x24c	; 0x24c <set_auto_ack>

	// enable RX addresses for data pipes 0 and 1
	nrf24_set_en_rxaddr(ERX_P0 | ERX_P1);
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 8c 03 	call	0x718	; 0x718 <nrf24_set_en_rxaddr>

	// auto retransmit delay wait 1000 us
	// auto retransmit count, up to 15 (0x0F) retransmits on fail.
	nrf24_set_setup_retr(ARD_WAIT_500US | 0x0F);
 3a4:	8f e1       	ldi	r24, 0x1F	; 31
 3a6:	0e 94 96 03 	call	0x72c	; 0x72c <nrf24_set_setup_retr>
	
	// set address width to 5 bytes.
	nrf24_set_setup_aw(AW_5BYTES);
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 91 03 	call	0x722	; 0x722 <nrf24_set_setup_aw>

	set_dynamic_payload();
 3b0:	0e 94 30 01 	call	0x260	; 0x260 <set_dynamic_payload>
	set_features();
 3b4:	0e 94 3a 01 	call	0x274	; 0x274 <set_features>

	// number of bytes in RX payload for data pipe.
	set_payload1_size();
 3b8:	0e 94 55 01 	call	0x2aa	; 0x2aa <set_payload1_size>
	
	set_channel();
 3bc:	0e 94 9a 01 	call	0x334	; 0x334 <set_channel>
	set_rf_setup();
 3c0:	0e 94 9f 01 	call	0x33e	; 0x33e <set_rf_setup>

	// set the addresses.
	m_pipe1_address[0] = 0x01;
 3c4:	e0 e0       	ldi	r30, 0x00	; 0
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	c0 83       	st	Z, r28
	m_pipe1_address[1] = 0x02;
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	81 83       	std	Z+1, r24	; 0x01
	m_pipe1_address[2] = 0x03;
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	82 83       	std	Z+2, r24	; 0x02
	m_pipe1_address[3] = 0x04;
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	83 83       	std	Z+3, r24	; 0x03
	m_pipe1_address[4] = 0x01;
 3d8:	c4 83       	std	Z+4, r28	; 0x04

	set_pipe1_address();
 3da:	0e 94 b8 01 	call	0x370	; 0x370 <set_pipe1_address>

	// flush the buffers.
	nrf24_flush_rx();
 3de:	0e 94 56 03 	call	0x6ac	; 0x6ac <nrf24_flush_rx>
	nrf24_flush_tx();
 3e2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <nrf24_flush_tx>

	// clear the status bits by setting them to 1.
	nrf24_set_status(STATUS_RX_DR | STATUS_TX_DS | STATUS_MAX_RT);
 3e6:	80 e7       	ldi	r24, 0x70	; 112
 3e8:	0e 94 a5 03 	call	0x74a	; 0x74a <nrf24_set_status>

	m_mode = reciever;
 3ec:	c0 93 d2 01 	sts	0x01D2, r28	; 0x8001d2 <m_mode>
	cgrf_power_up();
 3f0:	0e 94 83 01 	call	0x306	; 0x306 <cgrf_power_up>
}
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <config_character_display>:
	uint8_t ch1 = hex[(n >> 4)];
	uint8_t ch2 = hex[(n & 0x0F)];
	
	oled_write_character(ch1, x, y);
	oled_write_character(ch2, x+1, y);
}
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <oled_config>
 3fc:	88 e3       	ldi	r24, 0x38	; 56
 3fe:	0e 94 a0 00 	call	0x140	; 0x140 <oled_write_cmd>
 402:	0e 94 a8 00 	call	0x150	; 0x150 <oled_cursor_home>
 406:	0e 94 ac 00 	call	0x158	; 0x158 <oled_incremental_cursor>
 40a:	0e 94 a4 00 	call	0x148	; 0x148 <oled_clear>
 40e:	08 95       	ret

00000410 <display_number>:
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	d8 2f       	mov	r29, r24
 41a:	16 2f       	mov	r17, r22
 41c:	04 2f       	mov	r16, r20
 41e:	c9 e2       	ldi	r28, 0x29	; 41
 420:	8c 9f       	mul	r24, r28
 422:	c1 2d       	mov	r28, r1
 424:	11 24       	eor	r1, r1
 426:	c2 95       	swap	r28
 428:	cf 70       	andi	r28, 0x0F	; 15
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	8c 0f       	add	r24, r28
 42e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
 432:	84 e6       	ldi	r24, 0x64	; 100
 434:	c8 9f       	mul	r28, r24
 436:	d0 19       	sub	r29, r0
 438:	11 24       	eor	r1, r1
 43a:	cd ec       	ldi	r28, 0xCD	; 205
 43c:	dc 9f       	mul	r29, r28
 43e:	c1 2d       	mov	r28, r1
 440:	11 24       	eor	r1, r1
 442:	c6 95       	lsr	r28
 444:	c6 95       	lsr	r28
 446:	c6 95       	lsr	r28
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	61 0f       	add	r22, r17
 44c:	40 2f       	mov	r20, r16
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	8c 0f       	add	r24, r28
 452:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	61 0f       	add	r22, r17
 45a:	cc 0f       	add	r28, r28
 45c:	8c 2f       	mov	r24, r28
 45e:	88 0f       	add	r24, r24
 460:	88 0f       	add	r24, r24
 462:	c8 0f       	add	r28, r24
 464:	80 e3       	ldi	r24, 0x30	; 48
 466:	8d 0f       	add	r24, r29
 468:	40 2f       	mov	r20, r16
 46a:	8c 1b       	sub	r24, r28
 46c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <display_binary>:

void display_binary(uint8_t const n, uint8_t const x, uint8_t const y)
{
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	04 2f       	mov	r16, r20
	uint8_t xpos = x;
 488:	16 2f       	mov	r17, r22
 48a:	c7 e0       	ldi	r28, 0x07	; 7
 48c:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (uint8_t i = 0; i !=8; i++)
	{
		if (n & (1 << (7 - i)))
 48e:	e8 2e       	mov	r14, r24
 490:	f1 2c       	mov	r15, r1
 492:	97 01       	movw	r18, r14
 494:	0c 2e       	mov	r0, r28
 496:	02 c0       	rjmp	.+4      	; 0x49c <display_binary+0x22>
 498:	35 95       	asr	r19
 49a:	27 95       	ror	r18
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <display_binary+0x1e>
 4a0:	20 ff       	sbrs	r18, 0
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <display_binary+0x36>
		{
			oled_write_character('1', xpos, y);
 4a4:	40 2f       	mov	r20, r16
 4a6:	61 2f       	mov	r22, r17
 4a8:	81 e3       	ldi	r24, 0x31	; 49
 4aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <display_binary+0x40>
		}
		else
		{
			oled_write_character('0', xpos, y);
 4b0:	40 2f       	mov	r20, r16
 4b2:	61 2f       	mov	r22, r17
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
		}
		
		xpos++;
 4ba:	1f 5f       	subi	r17, 0xFF	; 255
 4bc:	21 97       	sbiw	r28, 0x01	; 1
 4be:	48 f7       	brcc	.-46     	; 0x492 <display_binary+0x18>
	}
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <display_string>:

void display_string(char * const text, uint8_t const size, uint8_t const x, uint8_t const y)
{
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
	uint8_t xpos = x;
	char * ptr = text;
	
	for (uint8_t i = 0; i !=size; i++)
 4d8:	66 23       	and	r22, r22
 4da:	81 f0       	breq	.+32     	; 0x4fc <display_string+0x2e>
 4dc:	f2 2e       	mov	r15, r18
 4de:	c4 2f       	mov	r28, r20
 4e0:	d4 2f       	mov	r29, r20
 4e2:	d6 0f       	add	r29, r22
 4e4:	08 2f       	mov	r16, r24
 4e6:	19 2f       	mov	r17, r25
	{
		char ch = *ptr;
		uint8_t n = (uint8_t)ch;
		oled_write_character(n, xpos, y);
 4e8:	4f 2d       	mov	r20, r15
 4ea:	6c 2f       	mov	r22, r28
 4ec:	f8 01       	movw	r30, r16
 4ee:	81 91       	ld	r24, Z+
 4f0:	8f 01       	movw	r16, r30
 4f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <oled_write_character>
		xpos++;
 4f6:	cf 5f       	subi	r28, 0xFF	; 255
void display_string(char * const text, uint8_t const size, uint8_t const x, uint8_t const y)
{
	uint8_t xpos = x;
	char * ptr = text;
	
	for (uint8_t i = 0; i !=size; i++)
 4f8:	dc 13       	cpse	r29, r28
 4fa:	f6 cf       	rjmp	.-20     	; 0x4e8 <display_string+0x1a>
		uint8_t n = (uint8_t)ch;
		oled_write_character(n, xpos, y);
		xpos++;
		ptr++;
	}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	08 95       	ret

00000508 <config_led>:
#define LED0 PC4

void config_led(void)
{
	// setup led for output.
	DDRC |= (1 << LED0);
 508:	3c 9a       	sbi	0x07, 4	; 7
 50a:	08 95       	ret

0000050c <led_on>:
}

// switch led on.
void led_on(void)
{
	PORTC |= (1 << LED0);
 50c:	44 9a       	sbi	0x08, 4	; 8
 50e:	08 95       	ret

00000510 <led_off>:
}

// switch led off.
void led_off(void)
{
	PORTC &= ~(1 << LED0);
 510:	44 98       	cbi	0x08, 4	; 8
 512:	08 95       	ret

00000514 <__vector_4>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
 520:	35 99       	sbic	0x06, 5	; 6
 522:	0a c0       	rjmp	.+20     	; 0x538 <__vector_4+0x24>
 524:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <m_button_on>
 528:	81 11       	cpse	r24, r1
 52a:	04 c0       	rjmp	.+8      	; 0x534 <__vector_4+0x20>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <m_button_on>
 532:	02 c0       	rjmp	.+4      	; 0x538 <__vector_4+0x24>
 534:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <m_button_on>
 538:	8f 91       	pop	r24
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <setup_btn_interrupts>:
 544:	3d 98       	cbi	0x07, 5	; 7
 546:	ec e6       	ldi	r30, 0x6C	; 108
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 62       	ori	r24, 0x20	; 32
 54e:	80 83       	st	Z, r24
 550:	e8 e6       	ldi	r30, 0x68	; 104
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	82 60       	ori	r24, 0x02	; 2
 558:	80 83       	st	Z, r24
 55a:	78 94       	sei
 55c:	08 95       	ret

0000055e <config_receive>:
	}	
}

void config_receive()
{
	setup_btn_interrupts();
 55e:	0e 94 a2 02 	call	0x544	; 0x544 <setup_btn_interrupts>
	config_led();
 562:	0e 94 84 02 	call	0x508	; 0x508 <config_led>
	config_character_display();
 566:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <config_character_display>
	oled_power_on();
 56a:	0e 94 b0 00 	call	0x160	; 0x160 <oled_power_on>

	cgrf_init();
 56e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <cgrf_init>
	cgrf_start_as_reciever();
 572:	0e 94 bd 01 	call	0x37a	; 0x37a <cgrf_start_as_reciever>
	led_on();
 576:	0e 94 86 02 	call	0x50c	; 0x50c <led_on>
 57a:	81 ee       	ldi	r24, 0xE1	; 225
 57c:	94 e0       	ldi	r25, 0x04	; 4
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <config_receive+0x20>
 582:	00 c0       	rjmp	.+0      	; 0x584 <config_receive+0x26>
 584:	00 00       	nop
 586:	08 95       	ret

00000588 <run_receive>:
	_delay_ms(5);
}

void run_receive()
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	a0 97       	sbiw	r28, 0x20	; 32
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[32] = {0, 0, 0};
 59c:	fe 01       	movw	r30, r28
 59e:	31 96       	adiw	r30, 0x01	; 1
 5a0:	80 e2       	ldi	r24, 0x20	; 32
 5a2:	df 01       	movw	r26, r30
 5a4:	1d 92       	st	X+, r1
 5a6:	8a 95       	dec	r24
 5a8:	e9 f7       	brne	.-6      	; 0x5a4 <run_receive+0x1c>
	uint8_t running = 1;
	uint8_t status = 0;

	display_string("Listening",9,1,1);
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	69 e0       	ldi	r22, 0x09	; 9
 5b0:	8b e0       	ldi	r24, 0x0B	; 11
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 67 02 	call	0x4ce	; 0x4ce <display_string>
	m_button_on = 1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <m_button_on>
			}
			else
			{
				cgrf_power_down();
				led_off();
				oled_power_off();
 5be:	10 e0       	ldi	r17, 0x00	; 0
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <run_receive+0x3c>
 5c2:	81 e0       	ldi	r24, 0x01	; 1
	display_string("Listening",9,1,1);
	m_button_on = 1;

	while (1)
	{
		if (running != m_button_on)
 5c4:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <m_button_on>
 5c8:	89 17       	cp	r24, r25
 5ca:	89 f0       	breq	.+34     	; 0x5ee <run_receive+0x66>
			if (running == 0)
				running = 1;
			else
				running = 0;

			if (running == 1)
 5cc:	81 11       	cpse	r24, r1
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <run_receive+0x56>
			{
				cgrf_power_up();
 5d0:	0e 94 83 01 	call	0x306	; 0x306 <cgrf_power_up>
				led_on();
 5d4:	0e 94 86 02 	call	0x50c	; 0x50c <led_on>
				oled_power_on();	
 5d8:	0e 94 b0 00 	call	0x160	; 0x160 <oled_power_on>
 5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <run_receive+0x6a>
			}
			else
			{
				cgrf_power_down();
 5de:	0e 94 8e 01 	call	0x31c	; 0x31c <cgrf_power_down>
				led_off();
 5e2:	0e 94 88 02 	call	0x510	; 0x510 <led_off>
				oled_power_off();
 5e6:	0e 94 b4 00 	call	0x168	; 0x168 <oled_power_off>
 5ea:	81 2f       	mov	r24, r17
 5ec:	eb cf       	rjmp	.-42     	; 0x5c4 <run_receive+0x3c>
			}
		}
		
		if (running == 1)
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	49 f7       	brne	.-46     	; 0x5c4 <run_receive+0x3c>
		{
			if (cgrf_data_ready() == 1)
 5f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <cgrf_data_ready>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	21 f7       	brne	.-56     	; 0x5c2 <run_receive+0x3a>
			{
				status = cgrf_get_payload(&buffer[0], 3);
 5fa:	63 e0       	ldi	r22, 0x03	; 3
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	0e 94 f6 00 	call	0x1ec	; 0x1ec <cgrf_get_payload>
				
				display_binary(status, 1, 1);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	0e 94 3d 02 	call	0x47a	; 0x47a <display_binary>
				display_string(" ", 1, 9, 1);
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	49 e0       	ldi	r20, 0x09	; 9
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	89 e2       	ldi	r24, 0x29	; 41
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 67 02 	call	0x4ce	; 0x4ce <display_string>
				display_number(buffer[0], 1, 2);
 61a:	42 e0       	ldi	r20, 0x02	; 2
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	0e 94 08 02 	call	0x410	; 0x410 <display_number>
				display_number(buffer[1], 5, 2);
 624:	42 e0       	ldi	r20, 0x02	; 2
 626:	65 e0       	ldi	r22, 0x05	; 5
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	0e 94 08 02 	call	0x410	; 0x410 <display_number>
				display_number(buffer[2], 8, 2);
 62e:	42 e0       	ldi	r20, 0x02	; 2
 630:	68 e0       	ldi	r22, 0x08	; 8
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	0e 94 08 02 	call	0x410	; 0x410 <display_number>
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	c4 cf       	rjmp	.-120    	; 0x5c4 <run_receive+0x3c>

0000063c <main>:
int main(void)
{
	//config_transmit();
	//run_transmit();

	config_receive();
 63c:	0e 94 af 02 	call	0x55e	; 0x55e <config_receive>
	run_receive();
 640:	0e 94 c4 02 	call	0x588	; 0x588 <run_receive>

00000644 <nrf24_configure_ports>:

// get radio frequency setup register value and return by pointer;
uint8_t nrf24_get_rf_setup(uint8_t * value)
{
	return read_register_bytes(RMAP_RF_SETUP, value, 1);
}
 644:	38 9a       	sbi	0x07, 0	; 7
 646:	39 9a       	sbi	0x07, 1	; 7
 648:	25 9a       	sbi	0x04, 5	; 4
 64a:	23 9a       	sbi	0x04, 3	; 4
 64c:	24 98       	cbi	0x04, 4	; 4
 64e:	40 98       	cbi	0x08, 0	; 8
 650:	41 9a       	sbi	0x08, 1	; 8
 652:	08 95       	ret

00000654 <nrf24_set_ce_low>:
 654:	40 98       	cbi	0x08, 0	; 8
 656:	08 95       	ret

00000658 <nrf24_set_ce_high>:
 658:	40 9a       	sbi	0x08, 0	; 8
 65a:	08 95       	ret

0000065c <spi_out_command>:
 65c:	68 2f       	mov	r22, r24
 65e:	2d 98       	cbi	0x05, 5	; 5
 660:	97 e0       	ldi	r25, 0x07	; 7
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	e1 e0       	ldi	r30, 0x01	; 1
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	49 2f       	mov	r20, r25
 66c:	9b 01       	movw	r18, r22
 66e:	09 2e       	mov	r0, r25
 670:	02 c0       	rjmp	.+4      	; 0x676 <spi_out_command+0x1a>
 672:	35 95       	asr	r19
 674:	27 95       	ror	r18
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <spi_out_command+0x16>
 67a:	20 ff       	sbrs	r18, 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <spi_out_command+0x26>
 67e:	2b 9a       	sbi	0x05, 3	; 5
 680:	01 c0       	rjmp	.+2      	; 0x684 <spi_out_command+0x28>
 682:	2b 98       	cbi	0x05, 3	; 5
 684:	2d 9a       	sbi	0x05, 5	; 5
 686:	1c 9b       	sbis	0x03, 4	; 3
 688:	07 c0       	rjmp	.+14     	; 0x698 <spi_out_command+0x3c>
 68a:	9f 01       	movw	r18, r30
 68c:	02 c0       	rjmp	.+4      	; 0x692 <spi_out_command+0x36>
 68e:	22 0f       	add	r18, r18
 690:	33 1f       	adc	r19, r19
 692:	4a 95       	dec	r20
 694:	e2 f7       	brpl	.-8      	; 0x68e <spi_out_command+0x32>
 696:	82 2b       	or	r24, r18
 698:	2d 98       	cbi	0x05, 5	; 5
 69a:	91 50       	subi	r25, 0x01	; 1
 69c:	30 f7       	brcc	.-52     	; 0x66a <spi_out_command+0xe>
 69e:	08 95       	ret

000006a0 <nrf24_flush_tx>:
 6a0:	41 98       	cbi	0x08, 1	; 8
 6a2:	81 ee       	ldi	r24, 0xE1	; 225
 6a4:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 6a8:	41 9a       	sbi	0x08, 1	; 8
 6aa:	08 95       	ret

000006ac <nrf24_flush_rx>:
 6ac:	41 98       	cbi	0x08, 1	; 8
 6ae:	82 ee       	ldi	r24, 0xE2	; 226
 6b0:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 6b4:	41 9a       	sbi	0x08, 1	; 8
 6b6:	08 95       	ret

000006b8 <spi_out_data_value>:
 6b8:	2d 98       	cbi	0x05, 5	; 5
 6ba:	97 e0       	ldi	r25, 0x07	; 7
 6bc:	48 2f       	mov	r20, r24
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	9a 01       	movw	r18, r20
 6c2:	09 2e       	mov	r0, r25
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <spi_out_data_value+0x12>
 6c6:	35 95       	asr	r19
 6c8:	27 95       	ror	r18
 6ca:	0a 94       	dec	r0
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <spi_out_data_value+0xe>
 6ce:	20 ff       	sbrs	r18, 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <spi_out_data_value+0x1e>
 6d2:	2b 9a       	sbi	0x05, 3	; 5
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <spi_out_data_value+0x20>
 6d6:	2b 98       	cbi	0x05, 3	; 5
 6d8:	2d 9a       	sbi	0x05, 5	; 5
 6da:	2d 98       	cbi	0x05, 5	; 5
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	80 f7       	brcc	.-32     	; 0x6c0 <spi_out_data_value+0x8>
 6e0:	08 95       	ret

000006e2 <write_register_value>:
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	d6 2f       	mov	r29, r22
 6e8:	41 98       	cbi	0x08, 1	; 8
 6ea:	8f 71       	andi	r24, 0x1F	; 31
 6ec:	80 62       	ori	r24, 0x20	; 32
 6ee:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 6f2:	c8 2f       	mov	r28, r24
 6f4:	8d 2f       	mov	r24, r29
 6f6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <spi_out_data_value>
 6fa:	41 9a       	sbi	0x08, 1	; 8
 6fc:	8c 2f       	mov	r24, r28
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <nrf24_set_config>:
 704:	68 2f       	mov	r22, r24
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 70c:	08 95       	ret

0000070e <nrf24_set_en_aa>:
 70e:	68 2f       	mov	r22, r24
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 716:	08 95       	ret

00000718 <nrf24_set_en_rxaddr>:
 718:	68 2f       	mov	r22, r24
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 720:	08 95       	ret

00000722 <nrf24_set_setup_aw>:
 722:	68 2f       	mov	r22, r24
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 72a:	08 95       	ret

0000072c <nrf24_set_setup_retr>:
 72c:	68 2f       	mov	r22, r24
 72e:	84 e0       	ldi	r24, 0x04	; 4
 730:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 734:	08 95       	ret

00000736 <nrf24_set_rf_ch>:
 736:	68 2f       	mov	r22, r24
 738:	85 e0       	ldi	r24, 0x05	; 5
 73a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 73e:	08 95       	ret

00000740 <nrf24_set_rf_setup>:
 740:	68 2f       	mov	r22, r24
 742:	86 e0       	ldi	r24, 0x06	; 6
 744:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 748:	08 95       	ret

0000074a <nrf24_set_status>:
 74a:	68 2f       	mov	r22, r24
 74c:	87 e0       	ldi	r24, 0x07	; 7
 74e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 752:	08 95       	ret

00000754 <nrf24_set_rx_pw_p0>:
 754:	68 2f       	mov	r22, r24
 756:	81 e1       	ldi	r24, 0x11	; 17
 758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 75c:	08 95       	ret

0000075e <nrf24_set_rx_pw_p1>:
 75e:	68 2f       	mov	r22, r24
 760:	82 e1       	ldi	r24, 0x12	; 18
 762:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 766:	08 95       	ret

00000768 <nrf24_set_rx_pw_p2>:
 768:	68 2f       	mov	r22, r24
 76a:	83 e1       	ldi	r24, 0x13	; 19
 76c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 770:	08 95       	ret

00000772 <nrf24_set_rx_pw_p3>:
 772:	68 2f       	mov	r22, r24
 774:	84 e1       	ldi	r24, 0x14	; 20
 776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 77a:	08 95       	ret

0000077c <nrf24_set_rx_pw_p4>:
 77c:	68 2f       	mov	r22, r24
 77e:	85 e1       	ldi	r24, 0x15	; 21
 780:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 784:	08 95       	ret

00000786 <nrf24_set_rx_pw_p5>:
 786:	68 2f       	mov	r22, r24
 788:	86 e1       	ldi	r24, 0x16	; 22
 78a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 78e:	08 95       	ret

00000790 <nrf24_set_dynpd>:
 790:	68 2f       	mov	r22, r24
 792:	8c e1       	ldi	r24, 0x1C	; 28
 794:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 798:	08 95       	ret

0000079a <nrf24_set_feature>:
 79a:	68 2f       	mov	r22, r24
 79c:	8d e1       	ldi	r24, 0x1D	; 29
 79e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <write_register_value>
 7a2:	08 95       	ret

000007a4 <spi_out_data_bytes>:
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	66 23       	and	r22, r22
 7ae:	71 f0       	breq	.+28     	; 0x7cc <spi_out_data_bytes+0x28>
 7b0:	ec 01       	movw	r28, r24
 7b2:	61 50       	subi	r22, 0x01	; 1
 7b4:	06 2f       	mov	r16, r22
 7b6:	10 e0       	ldi	r17, 0x00	; 0
 7b8:	0f 5f       	subi	r16, 0xFF	; 255
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	08 0f       	add	r16, r24
 7be:	19 1f       	adc	r17, r25
 7c0:	89 91       	ld	r24, Y+
 7c2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <spi_out_data_value>
 7c6:	c0 17       	cp	r28, r16
 7c8:	d1 07       	cpc	r29, r17
 7ca:	d1 f7       	brne	.-12     	; 0x7c0 <spi_out_data_bytes+0x1c>
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <write_register_bytes>:
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	8b 01       	movw	r16, r22
 7e0:	d4 2f       	mov	r29, r20
 7e2:	41 98       	cbi	0x08, 1	; 8
 7e4:	8f 71       	andi	r24, 0x1F	; 31
 7e6:	80 62       	ori	r24, 0x20	; 32
 7e8:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 7ec:	c8 2f       	mov	r28, r24
 7ee:	6d 2f       	mov	r22, r29
 7f0:	c8 01       	movw	r24, r16
 7f2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_out_data_bytes>
 7f6:	41 9a       	sbi	0x08, 1	; 8
 7f8:	8c 2f       	mov	r24, r28
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	08 95       	ret

00000804 <nrf24_set_rx_address_pipe1>:
 804:	45 e0       	ldi	r20, 0x05	; 5
 806:	bc 01       	movw	r22, r24
 808:	8b e0       	ldi	r24, 0x0B	; 11
 80a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <write_register_bytes>
 80e:	08 95       	ret

00000810 <spi_in_data_value>:
 810:	2d 98       	cbi	0x05, 5	; 5
 812:	97 e0       	ldi	r25, 0x07	; 7
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	2d 9a       	sbi	0x05, 5	; 5
 81c:	1c 9b       	sbis	0x03, 4	; 3
 81e:	08 c0       	rjmp	.+16     	; 0x830 <spi_in_data_value+0x20>
 820:	9a 01       	movw	r18, r20
 822:	09 2e       	mov	r0, r25
 824:	02 c0       	rjmp	.+4      	; 0x82a <spi_in_data_value+0x1a>
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	0a 94       	dec	r0
 82c:	e2 f7       	brpl	.-8      	; 0x826 <spi_in_data_value+0x16>
 82e:	82 2b       	or	r24, r18
 830:	2d 98       	cbi	0x05, 5	; 5
 832:	91 50       	subi	r25, 0x01	; 1
 834:	90 f7       	brcc	.-28     	; 0x81a <spi_in_data_value+0xa>
 836:	08 95       	ret

00000838 <spi_in_data_bytes>:
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	ec 01       	movw	r28, r24
 842:	66 23       	and	r22, r22
 844:	89 f0       	breq	.+34     	; 0x868 <spi_in_data_bytes+0x30>
 846:	61 50       	subi	r22, 0x01	; 1
 848:	06 2f       	mov	r16, r22
 84a:	10 e0       	ldi	r17, 0x00	; 0
 84c:	0f 5f       	subi	r16, 0xFF	; 255
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	08 0f       	add	r16, r24
 852:	19 1f       	adc	r17, r25
 854:	0e 94 08 04 	call	0x810	; 0x810 <spi_in_data_value>
 858:	89 93       	st	Y+, r24
 85a:	86 e0       	ldi	r24, 0x06	; 6
 85c:	8a 95       	dec	r24
 85e:	f1 f7       	brne	.-4      	; 0x85c <spi_in_data_bytes+0x24>
 860:	00 c0       	rjmp	.+0      	; 0x862 <spi_in_data_bytes+0x2a>
 862:	c0 17       	cp	r28, r16
 864:	d1 07       	cpc	r29, r17
 866:	b1 f7       	brne	.-20     	; 0x854 <spi_in_data_bytes+0x1c>
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret

00000872 <nrf24_get_payload_size>:
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	8c 01       	movw	r16, r24
 87a:	41 98       	cbi	0x08, 1	; 8
 87c:	80 e6       	ldi	r24, 0x60	; 96
 87e:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 882:	c8 2f       	mov	r28, r24
 884:	61 e0       	ldi	r22, 0x01	; 1
 886:	c8 01       	movw	r24, r16
 888:	0e 94 1c 04 	call	0x838	; 0x838 <spi_in_data_bytes>
 88c:	41 9a       	sbi	0x08, 1	; 8
 88e:	8c 2f       	mov	r24, r28
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <nrf24_get_payload>:
 898:	0f 93       	push	r16
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	8c 01       	movw	r16, r24
 8a2:	d6 2f       	mov	r29, r22
 8a4:	41 98       	cbi	0x08, 1	; 8
 8a6:	81 e6       	ldi	r24, 0x61	; 97
 8a8:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 8ac:	c8 2f       	mov	r28, r24
 8ae:	6d 2f       	mov	r22, r29
 8b0:	c8 01       	movw	r24, r16
 8b2:	0e 94 1c 04 	call	0x838	; 0x838 <spi_in_data_bytes>
 8b6:	41 9a       	sbi	0x08, 1	; 8
 8b8:	8c 2f       	mov	r24, r28
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	08 95       	ret

000008c4 <read_register_bytes>:
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	8b 01       	movw	r16, r22
 8ce:	d4 2f       	mov	r29, r20
 8d0:	41 98       	cbi	0x08, 1	; 8
 8d2:	8f 71       	andi	r24, 0x1F	; 31
 8d4:	0e 94 2e 03 	call	0x65c	; 0x65c <spi_out_command>
 8d8:	c8 2f       	mov	r28, r24
 8da:	6d 2f       	mov	r22, r29
 8dc:	c8 01       	movw	r24, r16
 8de:	0e 94 1c 04 	call	0x838	; 0x838 <spi_in_data_bytes>
 8e2:	41 9a       	sbi	0x08, 1	; 8
 8e4:	8c 2f       	mov	r24, r28
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	08 95       	ret

000008f0 <nrf24_get_status>:
}

// get status register value and return by pointer;
uint8_t nrf24_get_status(uint8_t * value)
{
	return read_register_bytes(RMAP_STATUS, value, 1);
 8f0:	41 e0       	ldi	r20, 0x01	; 1
 8f2:	bc 01       	movw	r22, r24
 8f4:	87 e0       	ldi	r24, 0x07	; 7
 8f6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <read_register_bytes>
}
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
